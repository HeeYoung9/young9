/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-08-28 08:15:46 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.JDBC;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.PreparedStatement;
import com.mysql.cj.xdevapi.PreparableStatement;
import java.sql.Statement;
import java.sql.Connection;
import java.sql.DriverManager;

public final class insertPro_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.mysql.cj.xdevapi.PreparableStatement");
    _jspx_imports_classes.add("java.sql.Connection");
    _jspx_imports_classes.add("java.sql.Statement");
    _jspx_imports_classes.add("java.sql.PreparedStatement");
    _jspx_imports_classes.add("java.sql.DriverManager");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>insertPro.jsp</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("<h1>insertPro.jsp</h1>\r\n");
      out.write("\r\n");
      out.write("<!-- 전달 정보 저장 -->\r\n");
 
 request.setCharacterEncoding("UTF-8");

 String name = request.getParameter("name");
 String gender = request.getParameter("gender");
 int age = Integer.parseInt(request.getParameter("age"));
 String ju1 = request.getParameter("ju1");
 String ju2 = request.getParameter("ju2");
 
 String jumin = ju1 + "-" + ju2;
 
	
      out.write("\r\n");
      out.write("	\r\n");
      out.write("이름: ");
      out.print( name );
      out.write(" <br>\r\n");
      out.write("나이: ");
      out.print( age );
      out.write(" <br>\r\n");
      out.write("성별: ");
      out.print( gender );
      out.write(" <br>\r\n");
      out.write("주민번호: ");
      out.print(jumin );
      out.write(" <br>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<h2> 전달받은 정보를 DB(Mysql)로 전달</h2>\r\n");

	//1. 드라이버 로드

	Class.forName("com.mysql.cj.jdbc.Driver");
	System.out.println("드라이버 로드 성공!");
	
	//2. 디비 연결
	
	Connection con = 
	DriverManager.getConnection("jdbc:mysql://localhost:3306/jspdb", "root", "1234");
	System.out.println("디비 연결 성공!");
	System.out.println("con : "+con);
	
	//3. sql구문 작성 &stmt 객체
	
	//String sql = 
	//"insert into itwill_member(idx, name, gender, age, jumin) values(null, '"+name+"','"+ gender+"', '"+age+"', '"+jumin+"')";
	
	String sql = 
			"insert into itwill_member(idx, name, gender, age, jumin) values(null, ?, ?, ?, ?)";
			
	
	//Statement stmt = con.createStatement();
	PreparedStatement pstmt = con.prepareStatement(sql); // 이제부터!! 쿼리만들때, PreparedStatment만 쓸거임
	
	//pstmt는 ?를 가지고 있게 됨.
			
	// ??? 정보추가 (?의 개수 = set데이터타입 개수)
			//pstmt.set데이터타입(?의 위치,변수명);
	pstmt.setString(1, name);
	pstmt.setString(2, gender);
	pstmt.setInt(3, age);
	pstmt.setString(4, jumin); //set의 순서는 1부터 올 필요는 없음. ?가 가리키는 위치만 정확하면 순서 바뀌어도 됨.
	//물음표 각각의 위치에 맞는 변수를 저장하도록 설정. Statement보다 보안에 더 좋음.
	
	
	
	//4. sql 실행
	
	//Statement에서 sql 설정시 선언된 변수명을 sql의 변수에서 사용하려면 '"+변수명+"' 으로 사용하면 됨. 
	
	//stmt.execute(sql);
	pstmt.executeUpdate();
	//실행의 결과가 테이블에 변화를 주는 경우 executUpdate() 사용
	//pstmt랑 stmt는 sql의 위치가 다르므로 처리 속도가 다르다. pstmt가 처리 속도가 더 빠름.
	
	System.out.println("회원 정보 저장 완료!");
	

      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
